create table if not exists MEETING(ID INTEGER PRIMARY KEY AUTOINCREMENT,PATIENT_ID INTEGER,PURPOSE varchar(100),DATE date,DESCRIPTION text , SUMMERY text , RESULT_DESCRIPTION text,RESULT_VALUE INTEGER ,DIAGNOSTIC_ID INTEGER,FOREIGN KEY(PATIENT_ID) REFERENCES PATIENT(ID),FOREIGN KEY(DIAGNOSTIC_ID) REFERENCES DIAGNOSTIC(ID));
create table if not exists POINTS(ID INTEGER PRIMARY KEY AUTOINCREMENT,NAME varchar(10) UNIQUE, MIN_NEEDLE_DEPTH INTEGER ,MAX_NEEDLE_DEPTH INTEGER,NEEDLE_DESCRIPTION varchar(100),POSITION varchar(60), IMPORTENCE INTEGER, COMMENT1 text,COMMENT2 text,NOTE text,IMAGE varchar(200));
create table if not exists SYMPTOM(ID INTEGER PRIMARY KEY AUTOINCREMENT , NAME varchar(40) UNIQUE,COMMENT varchar(100));
create table if not exists PATIENT(ID INTEGER PRIMARY KEY AUTOINCREMENT, NAME varchar(30) UNIQUE,TELEPHONE varchar(12),CELLPHONE varchar(12),BIRTHDAY date,GENDER INTEGER,ADDRESS varchar(50),EMAIL varchar(60),MEDICAL_DESCRIPTION text);
create table if not exists CHANNEL(ID INTEGER PRIMARY KEY,NAME varchar(10),RT varchar(10),MAIN_POINT INTEGER NOT NULL,EVEN_POINT INTEGER NOT NULL,PATH text,ROLE text,COMMENT text,FOREIGN KEY(MAIN_POINT) REFERENCES POINTS(ID),FOREIGN KEY(EVEN_POINT) REFERENCES POINTS(ID));
create table if not exists SYMPTOM_POINTS(SYMPTOM_ID INTEGER ,POINT_ID INTEGER ,IMPORTENCE INTEGER,comment varchar(50),FOREIGN KEY(SYMPTOM_ID) REFERENCES SYMPTOM(ID),FOREIGN KEY(POINT_ID) REFERENCES POINTS(ID),PRIMARY KEY (SYMPTOM_ID, POINT_ID));
create table if not exists SYMPTOM_CHANNEL(SYMPTOM_ID INTEGER ,CHANNEL_ID INTEGER ,IMPORTENCE INTEGER,COMMENT varchar(50),FOREIGN KEY(SYMPTOM_ID) REFERENCES SYMPTOM(ID),FOREIGN KEY(CHANNEL_ID) REFERENCES CHANNEL(ID),PRIMARY KEY(SYMPTOM_ID,CHANNEL_ID));
create table if not exists MEETING_POINTS(MEETING_ID INTEGER , POINT_ID INTEGER ,FOREIGN KEY(MEETING_ID) REFERENCES MEETING(ID),FOREIGN KEY(POINT_ID) REFERENCES POINTS(ID),PRIMARY KEY (MEETING_ID, POINT_ID));
create table if not exists MEETING_SYMPTOM(SYMPTOM_ID INTEGER ,MEETING_ID INTEGER,FOREIGN KEY(SYMPTOM_ID) REFERENCES SYMPTOM(ID),FOREIGN KEY(MEETING_ID) REFERENCES MEETING(ID),PRIMARY KEY (SYMPTOM_ID, MEETING_ID));
create table if not exists DIAGNOSTIC(ID INTEGER PRIMARY KEY AUTOINCREMENT,PROFESSION varchar(100),MAIN_COMPLAINT text,SECONDERY_COMPLAINT text,DRUGS_USED text,TESTS_MADE text,IN_PAIN BOOLEAN,PAIN_INFO text,IS_PAIN_PREVIOUS_EVALUATIONS BOOLEAN,PAIN_PREVIOUS_EVALUATION_INFO text,IS_THERE_ANYSORT_OF_SCANS BOOLEAN,THE_SCANS_INFO text,IS_UNDER_STRESS BOOLEAN,STRESS_INFO text,IS_TENSE_MUSCLES BOOLEAN,TENSE_MUSCLES_INFO text,IS_HIGH_BLOOD_PRESSURE_OR_COLESTEROL BOOLEAN,HIGH_BLOOD_PRESSURE_OR_COLESTEROL_INFO text,IS_GOOD_SLEEP BOOLEAN,GOOD_SLEEP_INFO text,IS_FALLEN_TO_SLEEP_PROBLEM BOOLEAN, FALLEN_TO_SLEEP_PROBLEM_INFO text,IS_PALPITATIONS BOOLEAN,PALPITATIONS_INFO text,DEFECATION_REGULARITY text,IS_FATIGUE_OR_FEELS_FULL_AFTER_EATING BOOLEAN,FATIGUE_OR_FEELS_FULL_AFTER_EATING_INFO text,IS_DESIRE_FOR_SWEETS_AFTER_EATING BOOLEAN,DESIRE_FOR_SWEETS_AFTER_EATING_INFO text,IS_DIFFICULTY_CONCENTRATING BOOLEAN,DIFFICULTY_CONCENTRATING_INFO text,IS_OFTEN_ILL BOOLEAN,OFTEN_ILL_INFO text,IS_SUFFERING_FROM_MUCUS BOOLEAN,SUFFERING_FROM_MUCUS_INFO text,IS_COUGH_OR_ALLERGY_SUFFERS BOOLEAN,COUGH_OR_ALLERGY_SUFFERS_INFO text,IS_SMOKING BOOLEAN,SMOKING_INFO text,IS_FREQUENT_OR_URGENT_URINATION BOOLEAN,FREQUENT_OR_URGENT_URINATION_INFO text,PREFER_COLD_OR_HOT INTEGER,PREFER_COLD_OR_HOT_INFO text,IS_SUFFERS_FROM_COLD_OR_HOT BOOLEAN,SUFFERS_FROM_COLD_OR_HOT_INFO text,IS_SATISFIED_DIETS BOOLEAN,SATISFIED_DIETS_INFO text,IS_WANT_TO_LOST_WEIGHT BOOLEAN,WANT_TO_LOST_WEIGHT_INFO text,IS_USING_CONTRACEPTION BOOLEAN,USING_CONTRACEPTION_INFO text,IS_CYCLE_REGULAR BOOLEAN,CYCLE_REGULAR_INFO text,IS_SUFFERING_FROM_CRAMPS_OR_NERVOUS_BEFORE_OR_DURING_MENSTRUATION BOOLEAN,SUFFERING_FROM_CRAMPS_OR_NERVOUS_BEFORE_OR_DURING_MENSTRUATION_INFO text,IS_SUFFERING_FROM_MENOPAUSE BOOLEAN,SUFFERING_FROM_MENOPAUSE_INFO text,HOW_MANY_HOURS_A_WEEK_ARE_YOU_WILLING_TO_INVEST_TO_IMPROVE_THE_QUALITY_OF_LIFE text,WHAT_CHANGES_DO_YOU_EXPECT_TO_SEE_FROM_TREATMENT text,PATIENT_ID INTEGER,CREATION_DATE DATE,FOREIGN KEY(PATIENT_ID) REFERENCES PATIENT(ID));
create table if not exists TREATMENT(ID INTEGER PRIMARY KEY AUTOINCREMENT,NAME text);
create table if not exists OPERATION_TREATMENT(ID INTEGER PRIMARY KEY AUTOINCREMENT,TREATMENT_ID INTEGER NOT NULL,TEXT text,FOREIGN KEY(TREATMENT_ID) REFERENCES TREATMENT(ID));
create table if not exists NOTE_TREATMENT(ID INTEGER PRIMARY KEY NOT NULL AUTOINCREMENT,TEXT text);
create table if not exists NOTE_TREATMENT_TREATMENT(NOTE_TREATMENT_ID INTEGER NOT NULL,TREATMENT_ID INTEGER NOT NULL,FOREIGN KEY(NOTE_TREATMENT_ID) REFERENCES NOTE_TREATMENT(ID),FOREIGN KEY(TREATMENT_ID) REFERENCES TREATMENT(ID));
create table if not exists NOTE_TREATMENT_POINT(NOTE_TREATMENT_ID INTEGER NOT NULL,POINT_ID INTEGER NOT NULL,FOREIGN KEY(NOTE_TREATMENT_ID) REFERENCES NOTE_TREATMENT(ID),FOREIGN KEY(POINT_ID) REFERENCES POINTS(ID));
create table if not exists NOTE_TREATMENT_OPERATION_TREATMENT(NOTE_TREATMENT_ID INTEGER NOT NULL,OPERATION_TREATMENT_ID INTEGER NOT NULL,FOREIGN KEY(NOTE_TREATMENT_ID) REFERENCES NOTE_TREATMENT(ID),FOREIGN KEY(OPERATION_TREATMENT_ID) REFERENCES OPERATION_TREATMENT(ID));
create table if not exists SYMPTOM_TREATMENT(ID INTEGER NOT NULL AUTOINCREMENT,TEXT text);
create table if not exists SYMPTOM_TREATMENT_POINT(SYMPTOM_ID INTEGER NOT NULL,POINT_ID INTEGER NOT NULL,FOREIGN KEY(SYMPTOM_ID) REFERENCES SYMPTOM_TREATMENT(ID),FOREIGN KEY(POINT_ID) REFERENCES POINTS(ID));
create table if not exists SYMPTOM_TREATMENT_OPERATION_TREATMENT(SYMPTOM_ID INTEGER NOT NULL,OPERATION_TREATMENT_ID INTEGER NOT NULL,FOREIGN KEY(SYMPTOM_ID) REFERENCES SYMPTOM_TREATMENT(ID),FOREIGN KEY(OPERATION_TREATMENT_ID) REFERENCES OPERATION_TREATMENT(ID));
create table if not exists OPERATION_TREATMENT_POINT(OPERATION_TREATMENT_ID INTEGER NOT NULL,POINT_ID INTEGER NOT NULL,FOREIGN KEY(OPERATION_TREATMENT_ID) REFERENCES OPERATION_TREATMENT(ID),FOREIGN KEY POINT_ID REFERENCES POINTS(ID));